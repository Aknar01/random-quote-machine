{"ast":null,"code":"var _jsxFileName = \"/Users/aknar/Desktop/random-quote-machine/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet urlQuote = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/\";\nconst App = () => {\n  _s();\n  const [quoteArr, setQuotesArr] = useState([]);\n  const getRandomQuote = () => {\n    return quoteArr[Math.floor(Math.random() * quoteArr.length)];\n  };\n  const [quote, setQuote] = useState(getRandomQuote()); // Изначальная цитата\n  const fetchQuotes = async url => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes);\n  };\n  useEffect(() => {\n    fetchQuotes(urlQuote);\n  }, [urlQuote]);\n  useEffect(() => {\n    if (quoteArr.length > 0) {\n      setQuote(getRandomQuote()); // Сразу после загрузки данных устанавливаем случайную цитату\n    }\n  }, [quoteArr]); // Перезапуск, когда quoteArr меняется\n\n  const handleNewQuote = () => {\n    setQuote(getRandomQuote()); // При нажатии генерировать новую случайную цитату\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quote-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"text\",\n        children: [\"\\\"\", quote.quote, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"author\",\n        children: [\"- \", quote.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: encodeURI(`https://twitter.com/intent/tweet?text=${quote.quote}`),\n        id: \"tweet-quote\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"new-quote\",\n        onClick: handleNewQuote,\n        children: \"New Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"093dcDwDb0UtE8a6abgNvd+GveA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","urlQuote","App","_s","quoteArr","setQuotesArr","getRandomQuote","Math","floor","random","length","quote","setQuote","fetchQuotes","url","response","fetch","parsedJSON","json","quotes","handleNewQuote","className","children","id","fileName","_jsxFileName","lineNumber","columnNumber","author","href","encodeURI","target","rel","onClick","_c","$RefreshReg$"],"sources":["/Users/aknar/Desktop/random-quote-machine/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.scss';\n\nlet urlQuote = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/\";\n\nconst App = () => {\n  const [quoteArr, setQuotesArr] = useState([]);\n  \n\n  const getRandomQuote = () => {\n    return quoteArr[Math.floor(Math.random() * quoteArr.length)];\n  }\n  const [quote, setQuote] = useState(getRandomQuote()); // Изначальная цитата\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes);\n  };\n\n  useEffect(() => {\n    fetchQuotes(urlQuote);\n  }, [urlQuote]);\n\n  useEffect(() => {\n    if (quoteArr.length > 0) {\n      setQuote(getRandomQuote()); // Сразу после загрузки данных устанавливаем случайную цитату\n    }\n  }, [quoteArr]); // Перезапуск, когда quoteArr меняется\n\n  const handleNewQuote = () => {\n    setQuote(getRandomQuote()); // При нажатии генерировать новую случайную цитату\n  };\n\n  return (\n    <div className=\"App\">\n      <div id=\"quote-box\">\n        <p id=\"text\">\"{quote.quote}\"</p>\n        <p id=\"author\">- {quote.author}</p>\n        <a\n          href={encodeURI(`https://twitter.com/intent/tweet?text=${quote.quote}`)}\n          id=\"tweet-quote\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Tweet\n        </a>\n        <button id=\"new-quote\" onClick={handleNewQuote}>New Quote</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpB,IAAIC,QAAQ,GAAG,oFAAoF;AAEnG,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAG7C,MAAMQ,cAAc,GAAGA,CAAA,KAAM;IAC3B,OAAOF,QAAQ,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,QAAQ,CAACM,MAAM,CAAC,CAAC;EAC9D,CAAC;EACD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAACQ,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,MAAMO,WAAW,GAAG,MAAOC,GAAG,IAAK;IACjC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;IACjC,MAAMG,UAAU,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxCb,YAAY,CAACY,UAAU,CAACE,MAAM,CAAC;EACjC,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdgB,WAAW,CAACZ,QAAQ,CAAC;EACvB,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEdJ,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,CAACM,MAAM,GAAG,CAAC,EAAE;MACvBE,QAAQ,CAACN,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B;EACF,CAAC,EAAE,CAACF,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEhB,MAAMgB,cAAc,GAAGA,CAAA,KAAM;IAC3BR,QAAQ,CAACN,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9B,CAAC;EAED,oBACEN,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBtB,OAAA;MAAKuB,EAAE,EAAC,WAAW;MAAAD,QAAA,gBACjBtB,OAAA;QAAGuB,EAAE,EAAC,MAAM;QAAAD,QAAA,GAAC,IAAC,EAACX,KAAK,CAACA,KAAK,EAAC,IAAC;MAAA;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAChC3B,OAAA;QAAGuB,EAAE,EAAC,QAAQ;QAAAD,QAAA,GAAC,IAAE,EAACX,KAAK,CAACiB,MAAM;MAAA;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnC3B,OAAA;QACE6B,IAAI,EAAEC,SAAS,CAAC,yCAAyCnB,KAAK,CAACA,KAAK,EAAE,CAAE;QACxEY,EAAE,EAAC,aAAa;QAChBQ,MAAM,EAAC,QAAQ;QACfC,GAAG,EAAC,qBAAqB;QAAAV,QAAA,EAC1B;MAED;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJ3B,OAAA;QAAQuB,EAAE,EAAC,WAAW;QAACU,OAAO,EAAEb,cAAe;QAAAE,QAAA,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxB,EAAA,CA7CID,GAAG;AAAAgC,EAAA,GAAHhC,GAAG;AA+CT,eAAeA,GAAG;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}