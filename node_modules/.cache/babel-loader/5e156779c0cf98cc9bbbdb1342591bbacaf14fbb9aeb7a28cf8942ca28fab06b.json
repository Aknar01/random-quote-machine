{"ast":null,"code":"var _jsxFileName = \"/Users/aknar/Desktop/random-quote-machine/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet urlQuote = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/\";\nconst colorsArr = ['4FC1FF', \"E8B9AB\", 'CB769E', '69995D', 'D2D7DF', '3AA7A3', 'ECA400', '006992', 'AFECE7', '81F499', '890620', 'B6465F', '8ACDEA'];\nconst App = () => {\n  _s();\n  const [quoteArr, setQuotesArr] = useState([]);\n  const [quote, setQuote] = useState({\n    quote: \"Loading...\",\n    author: \"Please wait\"\n  }); // Изначальная цитата\n  const [color, setColor] = useState('#4FC1FF');\n  const getRandomQuote = () => {\n    return quoteArr[Math.floor(Math.random() * quoteArr.length)];\n  };\n  const getRandomColor = () => {\n    return colorsArr[Math.floor(Math.random() * colorsArr.length)];\n  };\n  const fetchQuotes = async url => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes);\n  };\n  useEffect(() => {\n    fetchQuotes(urlQuote);\n    // eslint-disable-next-line\n  }, [urlQuote]);\n  useEffect(() => {\n    if (quoteArr.length > 0) {\n      setQuote(getRandomQuote()); // Сразу после загрузки данных устанавливаем случайную цитату\n    }\n    // eslint-disable-next-line\n  }, [quoteArr]); // Перезапуск, когда quoteArr меняется\n\n  const handleNewQuote = () => {\n    setQuote(getRandomQuote()); // При нажатии генерировать новую случайную цитату\n  };\n  const handleNewColor = () => {\n    setColor(getRandomColor()); // При нажатии генерировать новую случайную цитату\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"quote-box\",\n    className: \"quote-box\",\n    style: {\n      backgroundColor: \"white\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quote-text\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faQuoteLeft,\n        className: \"quote-mark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"text\",\n        className: \"quote\",\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quote-author\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"author\",\n        children: [\"-\", author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        id: \"tweet-quote\",\n        className: \"icon quote-btn transition\",\n        style: {\n          backgroundColor: `${accentColor}`\n        },\n        href: `https://twitter.com/intent/tweet?text=${quote}-${author}&hashtags=quote`,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faTwitter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"new-quote\",\n        className: \"quote-btn transition\",\n        onClick: () => handleNewQuote(),\n        style: {\n          backgroundColor: `${accentColor}`\n        },\n        children: \"New Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AVoJeVuhPvid+jiWTmnPcfbmpSY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","urlQuote","colorsArr","App","_s","quoteArr","setQuotesArr","quote","setQuote","author","color","setColor","getRandomQuote","Math","floor","random","length","getRandomColor","fetchQuotes","url","response","fetch","parsedJSON","json","quotes","handleNewQuote","handleNewColor","id","className","style","backgroundColor","children","FontAwesomeIcon","icon","faQuoteLeft","fileName","_jsxFileName","lineNumber","columnNumber","Button","accentColor","href","faTwitter","onClick","_c","$RefreshReg$"],"sources":["/Users/aknar/Desktop/random-quote-machine/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.scss';\n\nlet urlQuote = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/\";\n\nconst colorsArr = ['4FC1FF', \"E8B9AB\", 'CB769E', '69995D', 'D2D7DF', '3AA7A3', 'ECA400', '006992', 'AFECE7', '81F499', '890620', 'B6465F', '8ACDEA']\n\n\nconst App = () => {\n  const [quoteArr, setQuotesArr] = useState([]);\n  const [quote, setQuote] = useState({ quote: \"Loading...\", author: \"Please wait\" }); // Изначальная цитата\n  const [color, setColor] = useState('#4FC1FF')\n\n  const getRandomQuote = () => {\n    return quoteArr[Math.floor(Math.random() * quoteArr.length)];\n  }\n\n  const getRandomColor = () => {\n    return colorsArr[Math.floor(Math.random() * colorsArr.length)];\n  }\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes);\n  };\n\n  useEffect(() => {\n    fetchQuotes(urlQuote);\n    // eslint-disable-next-line\n  }, [urlQuote]);\n\n  useEffect(() => {\n    if (quoteArr.length > 0) {\n      setQuote(getRandomQuote()); // Сразу после загрузки данных устанавливаем случайную цитату\n    }\n    // eslint-disable-next-line\n  }, [quoteArr]); // Перезапуск, когда quoteArr меняется\n\n  const handleNewQuote = () => {\n    setQuote(getRandomQuote()); // При нажатии генерировать новую случайную цитату\n  };\n\n  const handleNewColor = () => {\n    setColor(getRandomColor()); // При нажатии генерировать новую случайную цитату\n\n  };\n  return (\n    \n    <div\n      id=\"quote-box\"\n      className=\"quote-box\"\n      style={{ backgroundColor: \"white\" }}\n    >\n      <div className=\"quote-text\">\n        <FontAwesomeIcon icon={faQuoteLeft} className=\"quote-mark\" />\n        <span id=\"text\" className=\"quote\">\n          {quote}\n        </span>\n      </div>\n      <div className=\"quote-author\">\n        <span id=\"author\">-{author}</span>\n      </div>\n      <div className=\"buttons\">\n        <Button\n          id=\"tweet-quote\"\n          className=\"icon quote-btn transition\"\n          style={{ backgroundColor: `${accentColor}` }}\n          href={`https://twitter.com/intent/tweet?text=${quote}-${author}&hashtags=quote`}\n        >\n          <FontAwesomeIcon icon={faTwitter} />\n        </Button>\n        <Button\n          id=\"new-quote\"\n          className=\"quote-btn transition\"\n          onClick={() => handleNewQuote()}\n          style={{ backgroundColor: `${accentColor}` }}\n        >\n          New Quote\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}