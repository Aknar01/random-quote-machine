{"ast":null,"code":"var _jsxFileName = \"/Users/aknar/Desktop/random-quote-machine/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport './App.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet urlQuote = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/\";\nconst colorsArr = ['4FC1FF', \"E8B9AB\", 'CB769E', '69995D', 'D2D7DF', '3AA7A3', 'ECA400', '006992', 'AFECE7', '81F499', '890620', 'B6465F', '8ACDEA'];\nconst App = () => {\n  _s();\n  const [quoteArr, setQuotesArr] = useState([]);\n  const [quote, setQuote] = useState({\n    quote: \"Loading...\",\n    author: \"Please wait\"\n  }); // Изначальная цитата\n  const [color, setColor] = useState('#4FC1FF');\n  const getRandomQuote = () => {\n    return quoteArr[Math.floor(Math.random() * quoteArr.length)];\n  };\n  const getRandomColor = () => {\n    return colorsArr[Math.floor(Math.random() * colorsArr.length)];\n  };\n  const fetchQuotes = async url => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes);\n  };\n  useEffect(() => {\n    fetchQuotes(urlQuote);\n    // eslint-disable-next-line\n  }, [urlQuote]);\n  useEffect(() => {\n    if (quoteArr.length > 0) {\n      setQuote(getRandomQuote()); // Сразу после загрузки данных устанавливаем случайную цитату\n    }\n    // eslint-disable-next-line\n  }, [quoteArr]); // Перезапуск, когда quoteArr меняется\n\n  const handleNewQuote = () => {\n    setQuote(getRandomQuote()); // При нажатии генерировать новую случайную цитату\n  };\n  const handleNewColor = () => {\n    setColor(getRandomColor()); // При нажатии генерировать новую случайную цитату\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: {\n      backgroundColor: {\n        color\n      },\n      color: 'white'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quote-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"text\",\n        children: [\"\\\"\", quote.quote, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"author\",\n        children: [\"- \", quote.author]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: encodeURI(`https://twitter.com/intent/tweet?text=${quote.quote}`),\n        id: \"tweet-quote\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"new-quote\",\n        onClick: () => {\n          handleNewQuote();\n          handleNewColor();\n        },\n        children: \"New Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"AVoJeVuhPvid+jiWTmnPcfbmpSY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","urlQuote","colorsArr","App","_s","quoteArr","setQuotesArr","quote","setQuote","author","color","setColor","getRandomQuote","Math","floor","random","length","getRandomColor","fetchQuotes","url","response","fetch","parsedJSON","json","quotes","handleNewQuote","handleNewColor","className","style","backgroundColor","children","id","fileName","_jsxFileName","lineNumber","columnNumber","href","encodeURI","target","rel","onClick","_c","$RefreshReg$"],"sources":["/Users/aknar/Desktop/random-quote-machine/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport './App.scss';\n\nlet urlQuote = \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/\";\n\nconst colorsArr = ['4FC1FF', \"E8B9AB\", 'CB769E', '69995D', 'D2D7DF', '3AA7A3', 'ECA400', '006992', 'AFECE7', '81F499', '890620', 'B6465F', '8ACDEA']\n\n\nconst App = () => {\n  const [quoteArr, setQuotesArr] = useState([]);\n  const [quote, setQuote] = useState({ quote: \"Loading...\", author: \"Please wait\" }); // Изначальная цитата\n  const [color, setColor] = useState('#4FC1FF')\n\n  const getRandomQuote = () => {\n    return quoteArr[Math.floor(Math.random() * quoteArr.length)];\n  }\n\n  const getRandomColor = () => {\n    return colorsArr[Math.floor(Math.random() * colorsArr.length)];\n  }\n\n  const fetchQuotes = async (url) => {\n    const response = await fetch(url);\n    const parsedJSON = await response.json();\n    setQuotesArr(parsedJSON.quotes);\n  };\n\n  useEffect(() => {\n    fetchQuotes(urlQuote);\n    // eslint-disable-next-line\n  }, [urlQuote]);\n\n  useEffect(() => {\n    if (quoteArr.length > 0) {\n      setQuote(getRandomQuote()); // Сразу после загрузки данных устанавливаем случайную цитату\n    }\n    // eslint-disable-next-line\n  }, [quoteArr]); // Перезапуск, когда quoteArr меняется\n\n  const handleNewQuote = () => {\n    setQuote(getRandomQuote()); // При нажатии генерировать новую случайную цитату\n  };\n\n  const handleNewColor = () => {\n    setColor(getRandomColor()); // При нажатии генерировать новую случайную цитату\n  };\n  return (\n    <div className=\"App\" style={{\n      backgroundColor: {color},\n      color: 'white',\n    }}>\n      <div id=\"quote-box\">\n        <p id=\"text\">\"{quote.quote}\"</p>\n        <p id=\"author\">- {quote.author}</p>\n        <a\n          href={encodeURI(`https://twitter.com/intent/tweet?text=${quote.quote}`)}\n          id=\"tweet-quote\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Tweet\n        </a>\n        <button id=\"new-quote\" onClick={()=>{\n          handleNewQuote();\n          handleNewColor()\n        }}>New Quote</button>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}